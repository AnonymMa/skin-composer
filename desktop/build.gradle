apply plugin: "java"

sourceCompatibility = 1.11
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.ray3k.skincomposer.desktop.DesktopLauncher"
project.ext.mainClassNameMac = "com.ray3k.skincomposer.desktop.MacLauncher"
project.ext.assetsDir = new File("../core/assets")
def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)

task run(dependsOn: classes, type: JavaExec) {
    if (osName.contains('mac')) {
        main = project.mainClassNameMac
    } else {
        main = project.mainClassName
    }
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    if (osName.contains('mac')) {
        main = project.mainClassNameMac
    } else {
        main = project.mainClassName
    }
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    archiveName = "${project.appName}.jar";
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    if (osName.contains('mac')) {
        manifest {
            attributes ('Main-Class': project.mainClassNameMac)
        }
    } else {
        manifest {
            attributes ('Main-Class': project.mainClassName, 'SplashScreen-Image' : 'splash.png')
        }
    }
}

task distMac(type: Jar) {
    archiveName = "skin-composer-mac.jar";
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
    
    manifest {
        attributes ('Main-Class': project.mainClassNameMac)
    }
}

dist.dependsOn classes
distMac.dependsOn classes

task javaDependencies(type: Exec) {
    workingDir project.projectDir
    def commands = [
            "$project.projectDir/jpackage/bin/jdeps",
            "--ignore-missing-deps",
            "--list-deps", "$buildDir/libs/${project.appName}.jar"
            
    ]
    
    commandLine = commands
}

task createRuntime(type: Exec) {
    doFirst() {
        project.delete("${buildDir}/runtime")
    }
    String runtimePath = "${buildDir}/runtime"

    workingDir project.projectDir
    commandLine = [
            "${project.projectDir}/jpackage/bin/jlink",
            '-p', "${project.projectDir}/jpackage/jmods",
            '--add-modules', 'java.base,java.desktop,jdk.unsupported',
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            '--strip-native-commands',
            "--vm=server",
            "--compress=2",
            '--output', runtimePath
    ]
}

// creates application bundle (executable + runtime)
task jpackage(type: Exec, dependsOn: dist) {
    doFirst() {
        project.delete("${buildDir}/distribution/$project.appName")
    }
    dependsOn createRuntime
    workingDir project.projectDir
    def commands = [
            "${project.projectDir}/jpackage/bin/jpackage",
            '--output', "${buildDir}/distribution",
            '--input', "${buildDir}/libs",
            '--name', project.appName,
            '--main-class', project.mainClassName,
            '--main-jar', "${project.appName}.jar",
            '--runtime-image', "${buildDir}/runtime"
    ]
    
    if (osName.contains('windows')) {
        commands << '--icon'
        commands << "${project.projectDir}/logo.ico"
        commands << '--java-options'
        commands << "-splash:splash.png"
    } else if (osName.contains('linux')) {
        commands << '--icon'
        commands << "${project.projectDir}/logo.png"
        commands << '--java-options'
        commands << "-splash:splash.png"
    } else if (osName.contains('mac')) {
        commands << '--icon'
        commands << "${project.projectDir}/logo.icns"
        commands << '--java-options'
        commands << "-XstartOnFirstThread"
    }
    
    commandLine = commands
    
    doLast() {
        if (!osName.contains('mac')) {
            copy {
                from '../core/assets/splash.png'
                into "${buildDir}/distribution/${project.appName}/app"
            }
        }
    }
}

task jpackageWinRarSfx(type: Exec, dependsOn: [jpackage]) {
    def winRarPath = 'C:/Program Files/WinRAR/WinRAR.exe'
    workingDir project.projectDir
    def commands = [
        winRarPath,
        'a',
        '-m5',
        '-ep1',
        '-r',
        '-sfx',
        '-iiconlogo.ico',
        '-zwinrar.txt',
        "${buildDir}/distribution/${project.appName}.exe",
        "${buildDir}/distribution/${project.appName}/"
    ]
    
    commandLine = commands
}

task updateAndCreateZip(type: Zip, dependsOn: [dist]) {
    doFirst {
        copy {
            from "${buildDir}/libs"
            into "${buildDir}/distribution/${project.appName}/app"
        }
        
        copy {
            from '../README.md'
            into "${buildDir}/distribution/${project.appName}"
        }

        copy {
            from '../CHANGES.md'
            into "${buildDir}/distribution/${project.appName}"
        }

        copy {
            from '../core/assets/splash.png'
            into "${buildDir}/distribution/${project.appName}/app"
        }
        
        copy {
            from './samples/'
            into "${buildDir}/distribution/${project.appName}/samples/"
        }
    }
    
    archiveName "${project.appName}_${org.gradle.internal.os.OperatingSystem.current().getFamilyName()}.zip"
    from "${buildDir}/distribution/${project.appName}"
    destinationDir = file("${buildDir}/distribution/")
}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}